using Microsoft.Extensions.Logging;using Newtonsoft.Json;using PIA.DotNet.Interview.Core.Models;using System;using System.Collections.Generic;using System.Linq;using System.Net.Http;using System.Threading.Tasks;namespace PIA.DotNet.Interview.WebUI.UI_BL{    public class TaskService : ITaskService    {        private readonly HttpClient _httpClient;        private readonly string _remoteServiceBaseUrl = "http://localhost:5001/"; // to do task_4        private readonly ILogger<TaskService> _logger;        public TaskService(ILogger<TaskService> logger)        {            _httpClient = new HttpClient();            _logger = logger;        }        public async Task<bool> Add(TaskViewModel task)        {            throw new NotImplementedException();        }        public async Task<bool> Delete(string id, TaskViewModel task)        {            throw new NotImplementedException();        }        public Task<bool> Edit(string id, TaskViewModel task)        {            // to do            throw new NotImplementedException();        }        public async Task<List<TaskViewModel>> Get()        {            try            {                var responseString = await _httpClient.GetStringAsync(String.Format("{0}api/Task/GetTasks", _remoteServiceBaseUrl));                var TaskViewModel = JsonConvert.DeserializeObject<List<TaskViewModel>>(responseString);                _logger.LogInformation("====== {p1} ====== {p2} ======", DateTime.Now.ToString("yyyy/MM/dd HH:mm:dd:fff"), responseString);                return TaskViewModel;            }            catch (Exception ex)            {                _logger.LogError(ex,"##{p1}## TaskService-Get() Exception", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));                // example for logging...                 // to do task_3                return new List<TaskViewModel>();            }        }        public async Task<ChartModel> chart()        {            try            {                var ChartModel = new ChartModel();                var responseString = await _httpClient.GetStringAsync(String.Format("{0}api/Task/GetTasks", _remoteServiceBaseUrl));                var TaskViewModel = JsonConvert.DeserializeObject<List<TaskViewModel>>(responseString);                ChartModel.Completed = TaskViewModel.Where(s => s.IsFinished == true).Count();                ChartModel.Incomplete = TaskViewModel.Where(s => s.IsFinished == false).Count();                _logger.LogInformation("====== {p1} ====== {p2} ======", DateTime.Now.ToString("yyyy/MM/dd HH:mm:dd:fff"), responseString);                return ChartModel;            }            catch (Exception ex)            {                _logger.LogError(ex, "##{p1}## TaskService-chart() Exception", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));                return new ChartModel();            }        }        public string OpenPopup()        {            return "<h1> This Is Modeless Popup Window</h1>";        }        public async Task<TaskViewModel> GetGetTaskbyID(string id)        {            try            {                var responseString = await _httpClient.GetStringAsync(String.Format("{0}api/task/GetTaskbyID?id="+id, _remoteServiceBaseUrl));                _logger.LogInformation("====== {p1} ====== {p2} ======", DateTime.Now.ToString("yyyy/MM/dd HH:mm:dd:fff"), responseString);                return JsonConvert.DeserializeObject<TaskViewModel>(responseString);            }            catch (Exception ex)            {                _logger.LogError(ex, "##{p1}## TaskService-Get() Exception", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));                return new TaskViewModel();            }        }        Task<IEnumerable<TaskViewModel>> ITaskService.Get()        {            throw new NotImplementedException();        }    }}